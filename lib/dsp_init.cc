/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <dsp_init.h>
#include <gr_io_signature.h>
#include <gnuradio_beagleboard_dsp.h>
#include <string.h>
#include <gr_realtime.h>

/*
***********************************************************************
Description:
	This function clears of the DSP related resources allocated.
***********************************************************************	
Parameters:
	None
***********************************************************************	
Returns:
	1: For Success
***********************************************************************	
See Also:
	dsp_clean.i  -> SWIG wrapper for C++ function and tells how to call
			  block in Python
	dsp_clean.h  -> Header for C++ implementation
	dsp_init.i   -> SWIG wrapper for C++ function and tells how to call
			  block in Python
	dsp_init.h   -> Header for C++ implementation
	
***********************************************************************	
Notes:
	Calls the "dsp_init_function()" implemented
	in the GPP side library which is where the actual function is
	executed.
	
	the name of the DSP executable to be loaded is hardcoded in the
	C++ implementation of the block "loopAl2.out".  While it's hardcoded
	the function can be easily modified to pass the DSP executable 
	as a parameter
***********************************************************************	
References:
***********************************************************************	
Examples:
	example.py
	
	import gnuradio
	
	dsp_init();
***********************************************************************	
*/

	
int
dsp_init()
{
  
  	/*
	***********************************************************************	
	The dsp_init_function is called from the GPP/DSP Library the 
	"loopAl2.out" corresponds to the name of the DSP executable to be loaded
	
	the name of the DSP executable to be loaded is hardcoded in the
	C++ implementation of the block "loopAl2.out".  While it's hardcoded
	the function can be easily modified to pass the DSP executable 
	as a parameter
	***********************************************************************	
	*/  

  dsp_init_function("loopAl2.out");
  
  return 1;
}

